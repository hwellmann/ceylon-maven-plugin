/*
 * Copyright Red Hat Inc. and/or its affiliates and other contributors
 * as indicated by the authors tag. All rights reserved.
 *
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU General Public License version 2.
 * 
 * This particular file is subject to the "Classpath" exception as provided in the 
 * LICENSE file that accompanied this code.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT A
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License,
 * along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 */
package org.omadac.ceylon.maven;

import java.io.File;
import java.util.List;

import org.apache.maven.archiver.MavenArchiveConfiguration;
import org.apache.maven.archiver.MavenArchiver;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.archiver.Archiver;
import org.codehaus.plexus.archiver.UnArchiver;
import org.codehaus.plexus.archiver.jar.JarArchiver;
import org.codehaus.plexus.archiver.manager.ArchiverManager;
import org.codehaus.plexus.util.FileUtils;

/**
 * Repackages a Ceylon archive, adding missing directories and resources,
 * updating the SHA1 checksum.
 */
@Mojo(name = "package", requiresProject = true)
public class CeylonPackageMojo extends AbstractMojo {

    /**
     * Output directory of the current build.
     */
    @Parameter(property = "ceylon.out", defaultValue = "${project.build.directory}")
    protected String out;

    /**
     * The modules to compile (without versions).
     */
    @Parameter(property = "ceylon.modules", required = true)
    protected List<String> modules;

    @Component
    private MavenProject project;

    @Component(role = Archiver.class, hint = "jar")
    private JarArchiver jarArchiver;

    @Component
    private ArchiverManager archiverManager;

    @Component
    private MavenSession session;

    @Parameter
    private MavenArchiveConfiguration archive = new MavenArchiveConfiguration();

    public void execute() throws MojoExecutionException, MojoFailureException {
        if (modules == null || modules.isEmpty()) {
            getLog().info("No module defined");
            return;
        }

        File carFile = getCarFile();
        if (carFile.exists()) {
            getLog().debug("Repackaging artifact " + carFile);
            project.getArtifact().setFile(carFile);
            
            File classesDir = new File(project.getBuild().getOutputDirectory());
            classesDir.mkdirs();
            
            try {
                // unpack archive generated by "ceylon compile" into classesDir,
                // which already contains filtered resources (from src/main/resource by default)
                UnArchiver unArchiver = archiverManager.getUnArchiver("zip");
                unArchiver.setSourceFile(carFile);
                unArchiver.setDestDirectory(classesDir);
                unArchiver.extract();

                // recreate archive, containing additional resources and directory entries
                // ("ceylon compile" does not create directory entries in 1.0.0.)
                MavenArchiver archiver = new MavenArchiver();
                archiver.setArchiver(jarArchiver);
                jarArchiver.addDirectory(classesDir);
                archiver.setOutputFile(carFile);
                archiver.createArchive(session, project, archive);
                
                // update the SHA1 checksum
                File carSha1File = new File(carFile.getParent(), carFile.getName() + ".sha1");
                Digester digester = new Digester();
                digester.calculate(carFile);
                String checksum = digester.getSha1();
                FileUtils.fileWrite(carSha1File.getAbsolutePath(), "UTF-8", checksum);
            }
            catch (Exception exc) {
                throw new MojoExecutionException("Error assembling CAR", exc);
            }
        }
        else {
            throw new MojoExecutionException(carFile.toString() + " does not exist");
        }
    }

    private File getCarFile() {
        String module = modules.get(0);
        String modulePath = module.replaceAll("\\.", File.separator);
        File moduleDir = new File(out, modulePath);
        File versionDir = new File(moduleDir, project.getVersion());
        String fileName = String.format("%s-%s.car", module, project.getVersion());
        return new File(versionDir, fileName);
    }
}
